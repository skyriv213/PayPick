name: Deploy Frontend to EC2

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up environment variables
      run: |  
        cd ./fe
        touch .env
        echo "NEXT_PUBLIC_NAVER_MAP_ID=${{ secrets.NEXT_PUBLIC_NAVER_MAP_ID }}" > ./.env
      shell: bash

    - name: Install SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        eval "$(ssh-agent -s)"
        ssh-add ~/.ssh/id_rsa

    - name: Create known_hosts file if not exists
      run: |
        if [ ! -f ~/.ssh/known_hosts ]; then
          touch ~/.ssh/known_hosts
        fi

    - name: Add EC2 to known_hosts
      run: ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.FE_DOCKER_USERNAME }}
        password: ${{ secrets.FE_DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ secrets.FE_WORKING_DIRECTORY }}
        push: true
        tags: ${{ secrets.FE_DOCKER_REPOSITORY_USERNAME }}/paypick:${{ github.sha }}, ${{ secrets.FE_DOCKER_REPOSITORY_USERNAME }}/paypick-nextjs-app:latest


    #- name: Push Docker image to DockerHub
      #run: |
        #docker push benidene/paypick-nextjs-app

    - name: Deploy to EC2 via SSH and Docker
      run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # 모든 Docker 컨테이너 강제 중지 및 삭제
            echo "Stopping and removing all Docker containers"
            docker rm -f $(docker ps -qa)

            # 최신 Docker 이미지로 새로운 컨테이너 실행
            echo "Pulling the latest Docker image"
            docker pull ${{ secrets.FE_DOCKER_REPOSITORY_USERNAME }}/paypick-nextjs-app:latest

            echo "Running the new Docker container"
            docker run -d -p 80:3000 --name next-app ${{ secrets.FE_DOCKER_REPOSITORY_USERNAME }}/paypick-nextjs-app:latest

            # 사용하지 않는 Docker 이미지 정리
            echo "Pruning unused Docker images"
            docker image prune -f
          EOF
