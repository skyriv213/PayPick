plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'

}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


java {
    sourceCompatibility = '17'
}

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // == 스프링 부트 3.0 이상 ==
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"


//    // Log4j 2 의존성 추가
//    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
//
//    // Optional: Log4j 2 Core (필요한 경우)
//    implementation 'org.apache.logging.log4j:log4j-core'
//    implementation 'org.apache.logging.log4j:log4j-api'

    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    compileOnly 'org.projectlombok:lombok'
//    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

}

// Logback 의존성 제거
//configurations {
//    all {
//        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//    }
//}
//jacoco 및 ascii docs
test {
//    jacoco{
//        destinationFile = file("build/reports/jacoco/jacoco.exec")
//    }
    outputs.dir snippetsDir
    useJUnitPlatform()
//    finalizedBy 'asciidoctor'
}

asciidoctor {
//    inputs.dir snippetsDir
    doFirst {
        delete file('src/main/resources/static/docs')
        mkdir "$build/generated-snippets"
    }
    configurations 'asciidoctorExtensions' // 이부분!
    dependsOn test
}
jar {
    enabled = false
}


bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"
        into 'src/main/resources/static/docs'
    }
}


task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc/**")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}


//jacoco {
//    toolVersion = "0.8.7"
//}

//jacocoTestReport {
//    reports {
//        // 원하는 리포트를 켜고 끌 수 있습니다.
//        xml.required = false
//        csv.required = false
//        html.required = true
//
////  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//        html.destination file("./build/reports/jacoco/jacocoHtml")
////  xml.destination file("$buildDir/jacoco.xml")
//    }
//    afterEvaluate {
//        classDirectories.setFrom(
//                files(classDirectories.files.collect {
//                    fileTree(dir: it, excludes: [
//                            '**/*Application*',
//                            '**/enums/**',
//                            '**/dto/**',
//                            '**/config/**',
//                            '**/security/**',
//                            '**/redis/**',
//                            '**/jwt/**',
//                            '**/security/**',
//                            '**/repository/**',
//                            '**/entity/**',
//                            '**/global/**'
//                    ])
//                })
//        )
//    }
//}

// === Querydsl 빌드 옵션 (선택사항) ===
def querydslDir = "$build/generated/querydsl"

//querydsl {
//    jpa = true
//    querydslSourcesDir = querydslDir
//}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}
//
//compileQuerydsl {
//    options.annotationProcessorPath = configurations.querydsl
//}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}