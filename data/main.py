# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18TGy_lbYCHv3DwRjFNc_bW3spUM4LtEb
"""

brands = [
    "GS25", "CU", "세븐일레븐", "이마트24", "미니스톱", "스토리웨이",
    "롯데백화점", "롯데아울렛", "롯데몰", "롯데면세점", "현대백화점", "현대아울렛", "현대백화점면세점",
    "AK플라자", "파르나스몰", "아이파크몰", "앨리웨이", "신라면세점", "JDC면세점",
    "스타필드", "갤러리아", "신세계면세점", "코스트코 코리아", "롯데마트", "롯데슈퍼",
    "홈플러스 마트", "홈플러스 익스프레스", "GS 더 프레시", "농협하나로마트", "초록마을",
    "식자재왕도매마트", "고향뜨락", "이마트 에브리데이", "이케아", "다이소", "롯데하이마트",
    "LG전자 베스트샵", "프리스비", "에이샵", "아이스토어", "아트박스", "오피스디포",
    "올리브영", "무신사 스탠다드", "이니스프리", "ABC마트", "스타벅스", "투썸플레이스",
    "빽다방", "메가커피", "이디야커피", "더벤티", "할리스", "공차", "커피빈", "엔제리너스",
    "폴바셋", "파스쿠찌", "블루보틀", "탐앤탐스", "아마스빈", "커피베이", "테라로사",
    "잠바주스", "커피앳웍스", "카페스토리웨이", "아티제", "댄싱컵", "팀홀튼", "컴포즈커피",
    "카페꼼마", "파리바게뜨", "파리크라상", "뚜레쥬르", "배스킨라빈스", "던킨", "크리스피 크림 도넛",
    "디저트39", "트리핀", "빚은", "롯데리아", "맥도날드", "KFC", "쉐이크쉑", "라그릴리아",
    "피그인더가든", "김가네", "봉추찜닭", "스트릿", "퀸즈파크", "베라", "라뜰리에", "에그슬럿",
    "시티델리", "리나스", "VIPS", "제일제면소", "더플레이스", "더스테이크하우스", "더테이스터블",
    "파파이스", "쿠차라", "아웃백 스테이크하우스", "플레이팅", "이삭토스트", "한솥도시락",
    "해비치호텔앤드리조트", "롯데호텔", "호텔신라", "그랜드 하얏트 서울", "그랜드 하얏트 인천",
    "파크 하얏트 서울", "파크 하얏트 부산", "콘래드 서울", "포시즌스 호텔 서울", "파라다이스 호텔앤리조트",
    "반얀트리 클럽 앤 스파 서울", "조선호텔앤리조트", "그랜드 인터컨티넨탈 서울 파르나스",
    "인터컨티넨탈 서울 코엑스", "파르나스 호텔 제주", "워커힐 호텔앤리조트", "워커힐 환승호텔 (인천국제공항)",
    "한화호텔앤드리조트", "더 플라자", "안다즈 서울 강남", "라이즈 오토그래프 컬렉션", "오크밸리",
    "다락휴", "글래드호텔앤리조트", "소피텔 앰배서더 서울", "세이지우드", "페어몬트 앰배서더 서울",
    "GS칼텍스", "E1", "롯데시네마", "교보문고", "교보핫트랙스", "영풍문고", "알라딘 중고서점",
    "종로서적", "서울랜드", "아쿠아플라넷", "설악 워터피아", "N서울타워", "공항철도", "마티나 골드",
    "마티나 라운지", "성문안 컨트리클럽", "배달의민족", "코스트코 코리아", "무신사", "대한항공",
    "아시아나항공", "진에어", "현대홈쇼핑", "GS SHOP", "롯데홈쇼핑", "롯데ON", "티몬", "갤러리아몰",
    "이랜드몰", "S.I. 빌리지", "파스텔몰", "GS 프레시몰", "우리동네 GS", "포켓CU", "오아시스마켓",
    "버거킹", "폴바셋", "도미노피자", "아임얼라이브", "롯데하이마트", "텐바이텐", "이니스프리",
    "현대이지웰", "롯데시네마", "알라딘", "모두투어", "SRT Play", "안다르", "라엘", "신세계면세점"
]

dong_list = [
    # 서울특별시
    "강남구 신사동", "강남구 압구정동", "강남구 역삼동", "강남구 개포동", "강남구 대치동",
    "강동구 천호동", "강동구 성내동", "강동구 둔촌동", "강서구 화곡동", "강서구 등촌동",
    "강서구 염창동", "관악구 신림동", "광진구 광장동", "광진구 자양동", "광진구 구의동",
    "구로구 구로동", "구로구 신도림동", "구로구 오류동", "금천구 가산동", "금천구 독산동",
    "노원구 상계동", "노원구 중계동", "노원구 하계동", "동대문구 답십리동", "동대문구 장안동",
    "동작구 상도동", "동작구 노량진동", "마포구 공덕동", "마포구 합정동", "마포구 서교동",
    "서대문구 창천동", "서대문구 연희동", "서대문구 남가좌동", "서초구 서초동", "서초구 방배동",
    "성동구 성수동", "성동구 금호동", "성북구 성북동", "성북구 길음동", "성북구 동소문동",
    "송파구 잠실동", "송파구 방이동", "송파구 석촌동", "양천구 목동", "양천구 신월동",
    "영등포구 여의도동", "영등포구 당산동", "영등포구 문래동", "용산구 이태원동", "용산구 용산동",
    "용산구 한남동", "은평구 진관동", "은평구 불광동", "종로구 종로동", "종로구 종로5가",
    "종로구 종로6가", "중구 명동", "중구 필동", "중랑구 중화동", "중랑구 면목동",

    # # 부산광역시
    # "강서구 가덕도동", "강서구 명지동", "강서구 신호동", "금정구 구서동", "금정구 장전동",
    # "금정구 남산동", "금정구 서동", "남구 대연동", "남구 문현동", "남구 용호동",
    # "동구 범일동", "동구 수정동", "동구 초량동", "동래구 명륜동", "동래구 사직동",
    # "부산진구 부전동", "부산진구 전포동", "부산진구 양정동", "북구 구포동", "북구 덕천동",
    # "북구 만덕동", "사상구 괘법동", "사상구 덕포동", "사하구 다대동", "사하구 당리동",
    # "서구 암남동", "서구 서대신동", "수영구 광안동", "수영구 남천동", "연제구 거제동",
    # "연제구 연산동", "영도구 봉래동", "영도구 청학동", "중구 동광동", "중구 중앙동",
    # "해운대구 우동", "해운대구 좌동", "해운대구 송정동",

    # # 대구광역시
    # "남구 대명동", "달서구 감삼동", "달서구 성당동", "달서구 월성동", "달서구 상인동",
    # "달서구 진천동", "달서구 송현동", "달성군 가창면", "달성군 구지면", "달성군 다사읍",
    # "달성군 화원읍", "동구 동촌동", "동구 신암동", "동구 신천동", "동구 신평동",
    # "북구 복현동", "북구 태전동", "서구 비산동", "서구 중리동", "수성구 만촌동",
    # "수성구 범어동", "수성구 중동", "수성구 황금동", "중구 남산동", "중구 대신동",
    # "중구 동인동", "중구 삼덕동",

    # # 인천광역시
    # "계양구 계산동", "계양구 작전동", "남동구 구월동", "남동구 논현동", "남동구 만수동",
    # "동구 만석동", "미추홀구 관교동", "미추홀구 주안동", "부평구 부평동", "부평구 삼산동",
    # "서구 검단동", "서구 석남동", "연수구 송도동", "연수구 연수동", "연수구 청학동",
    # "중구 도원동", "중구 북성동", "중구 신흥동", "중구 용유동",

    # # 광주광역시
    # "광산구 신가동", "광산구 송정동", "광산구 우산동", "남구 주월동", "동구 계림동",
    # "동구 산수동", "북구 두암동", "북구 문흥동", "북구 중흥동", "서구 금호동",
    # "서구 농성동", "서구 화정동",

    # # 대전광역시
    # "대덕구 법동", "대덕구 신탄진동", "동구 대동", "동구 용운동", "서구 관저동",
    # "서구 둔산동", "서구 월평동", "유성구 봉명동", "유성구 도룡동", "유성구 전민동",
    # "중구 대흥동", "중구 문화동",

    # # 울산광역시
    # "남구 달동", "남구 삼산동", "동구 방어동", "동구 전하동", "북구 명촌동",
    # "북구 연암동", "울주군 범서읍", "울주군 언양읍", "중구 반구동", "중구 우정동",

    # # 세종특별자치시
    # "고운동", "금남면", "나성동", "도담동", "부강면", "소정면", "아름동", "장군면",
    # "전의면", "전동면", "조치원읍", "종촌동", "한솔동", "합강동", "해밀동", "새롬동",

    # 경기도
    "고양시 덕양구 화정동", "고양시 덕양구 행신동", "고양시 일산동구 백석동", "고양시 일산서구 주엽동",
    "과천시 별양동", "과천시 부림동", "광명시 광명동", "광명시 철산동", "광주시 경안동",
    "광주시 오포읍", "구리시 갈매동", "구리시 교문동", "구리시 수택동", "군포시 군포동",
    "군포시 산본동", "김포시 감정동", "김포시 사우동", "김포시 장기동", "남양주시 금곡동",
    "남양주시 별내동", "남양주시 와부읍", "동두천시 보산동", "동두천시 중앙동", "부천시 원미구 상동",
    "부천시 원미구 중동", "부천시 소사구 송내동", "성남시 분당구 서현동", "성남시 분당구 야탑동",
    "성남시 수정구 태평동", "성남시 수정구 신흥동", "성남시 중원구 상대원동", "수원시 권선구 권선동"
]

import json
from sqlalchemy import create_engine, Column, Integer, String, DECIMAL
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
from pyproj import Transformer
import requests
import re
from html import unescape
from sqlalchemy import ForeignKey, Enum
from sqlalchemy.orm import relationship
import enum

Base = declarative_base()


class PayTypeEnum(enum.Enum):
    APPLE = "APPLE"
    NAVER = "NAVER"
    KAKAO = "KAKAO"
    LOCAL = "LOCAL"
    CASH = "CASH"
    ZERO = "ZERO"


class Payment(Base):
    __tablename__ = 'payments'
    id = Column(Integer, primary_key=True, autoincrement=True)
    pay_type = Column(Enum(PayTypeEnum), nullable=False)
    store_id = Column(Integer, ForeignKey('store.id'))

    store = relationship("Store", back_populates="payments")


class Store(Base):
    __tablename__ = 'store'
    id = Column(Integer, primary_key=True, autoincrement=True)
    store_name = Column(String(255), nullable=False)
    major_category = Column(String(250), nullable=False)
    middle_category = Column(String(250), nullable=True)
    address = Column(String(255), nullable=False)
    road_address = Column(String(255), nullable=True)
    description = Column(String(500), nullable=True)
    telephone = Column(String(50), nullable=True)
    latitude = Column(DECIMAL(9, 6), nullable=False)
    longitude = Column(DECIMAL(9, 6), nullable=False)
    payments = relationship("Payment", back_populates="store")


# def transform_coordinates(x, y):
#     try:
#         # 입력 좌표를 float로 변환
#
#         # 좌표 변환 수행 (EPSG:5179 -> EPSG:4326)
#         transformer = Transformer.from_crs("EPSG:5179", "EPSG:4326")
#         latitude, longitude = transformer.transform(y, x)
#
#         # 변환된 좌표를 소수점 단위로 변환
#         latitude = float(latitude)
#         longitude = float(longitude)
#
#         latitude /= 1e7
#         longitude /= 1e7
#
#         # 유효한 좌표 범위 확인
#         if not (-90 <= latitude <= 90) or not (-180 <= longitude <= 180):
#             raise ValueError(f"Invalid coordinates after transformation: latitude={latitude}, longitude={longitude}")
#
#         return latitude, longitude
#     except ValueError as e:
#         print(f"Invalid coordinate value: {e}")
#         return None, None
#     except Exception as e:
#         print(f"Error transforming coordinates ({x}, {y}): {e}")
#         return None, None

# def transform_coordinates(x, y):
#     transformer = Transformer.from_crs("EPSG:5179", "EPSG:4326")
#     return transformer.transform(y, x)
def transform_coordinates(x, y):
    try:
        # transformer = Transformer.from_crs("EPSG:5179", "EPSG:4326")
        latitude, longitude = y, x
        latitude, longitude = float(latitude), float(longitude)
        latitude = latitude / 10000000
        longitude = longitude / 10000000
        if not (-90 <= latitude <= 90) or not (-180 <= longitude <= 180):
            raise ValueError("Invalid coordinates")
        return latitude, longitude
    except Exception as e:
        print(f"Error transforming coordinates ({latitude}, {longitude}): {e}")
        return None, None


def clean_title(title):
    # HTML 태그 제거
    clean_text = re.sub(r'<[^>]+>', '', title)
    # 특수문자 제거 (HTML 엔티티 등)
    clean_text = unescape(clean_text)
    return clean_text


def parse_and_insert_store(json_data):
    data = json.loads(json_data)

    store_name = clean_title(data['title'])
    categories = data['category'].split('>')
    major_category = categories[0]
    middle_category = categories[1] if len(categories) > 1 else None
    address = data['address']
    road_address = data['roadAddress']
    description = data['description']
    telephone = data.get('telephone', None)
    mapx = data['mapx']
    mapy = data['mapy']

    latitude, longitude = transform_coordinates(mapx, mapy)
    if latitude is None or longitude is None:
        print(f"Skipping store due to invalid coordinates: {store_name}")
        return None

    new_store = Store(
        store_name=store_name,
        major_category=major_category,
        middle_category=middle_category,
        address=address,
        road_address=road_address,
        description=description,
        telephone=telephone,
        latitude=latitude,
        longitude=longitude
    )

    new_payment = Payment(
        pay_type=PayTypeEnum.APPLE,
        store=new_store
    )

    session.add(new_store)
    session.add(new_payment)
    session.commit()



from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base, sessionmaker

# 데이터베이스 연결 설정
db_name = "ana"
db_host = "127.0.0.1"  # MySQL 서버의 실제 호스트 이름 또는 IP 주소
db_username = "root"
db_password = "1234"
db_port = "3306"  # MySQL의 기본 포트는 3306입니다.

# SQLAlchemy 엔진 생성
engine = create_engine('mysql+mysqlconnector://root:1234@localhost:3306/ana?charset=utf8mb4')
Base.metadata.create_all(engine)

# 세션 생성
Session = sessionmaker(bind=engine)

session = Session()

# 네이버 API 연결 및 호출

# 네이버 API 키 설정
client_id = 'w99GiZ4fDAhVrQ22tvm5'  # 애플리케이션 등록 시 발급받은 클라이언트 아이디 값
client_secret = 'eO6SwWJZ5g'  # 애플리케이션 등록 시 발급받은 클라이언트 시크릿 값
for brand in brands:
    print(brand)
    for dong in dong_list:
        # print(dong)
        url = 'https://openapi.naver.com/v1/search/local.json'
        params = {
            'query': f'{brand} {dong}',  # 검색어를 문자열로 합침
            'display': 5,  # 검색 결과 개수
            'start': 1,  # 검색 시작 위치
            'sort': 'random'  # 정렬 방식
        }

        # 헤더 설정
        headers = {
            'X-Naver-Client-Id': client_id,
            'X-Naver-Client-Secret': client_secret
        }

        # GET 요청 보내기
        response = requests.get(url, headers=headers, params=params)

        # 응답 상태 확인
        if response.status_code == 200:
            for i in response.json()['items']:
                parse_and_insert_store(json.dumps(i))
                # session.add(new_store)

        session.commit()
    print(dong," was successful")