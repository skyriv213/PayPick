events {
    worker_connections 1024;
}

#
# http {
#     # HTTP 요청을 HTTPS로 리다이렉트
#     server {
#         listen 80;
#         server_name localhost;
#         return 301 https://$host$request_uri;
#     }
#
#     # HTTPS 서버 설정
#     server {
#         listen 443 ssl;
#         server_name localhost;
#
#         ssl_certificate /etc/nginx/localhost.crt;
#         ssl_certificate_key /etc/nginx/localhost-key.pem;
#
#         # Spring Boot API 리버스 프록시 설정
#         location / {
#             proxy_pass http://host.docker.internal:8080;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#
#             # WebSocket 설정을 위한 헤더
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection $http_connection;
#             proxy_pass_header X-XSRF-TOKEN;
#
#
#             # 타임아웃 설정 (WebSocket을 위한 설정)
#             proxy_read_timeout 86400;
#             proxy_send_timeout 86400;
#
#
#             proxy_set_header Origin '';
#
#         }
# #         access_log /data/logs/httpd/karint-access.log main;
# #         error_log /data/logs/httpd/karint-error.log debug;
#
# #         # WebSocket 프록시 설정 (/chat에 대한 wss:// 요청을 처리)
# #         location /chat {
# #             proxy_pass http://host.docker.internal:8080/chat;  # Spring Boot WebSocket 엔드포인트로 프록시
# #             proxy_set_header Host $host;
# #             proxy_set_header X-Real-IP $remote_addr;
# #             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
# #             proxy_set_header X-Forwarded-Proto $scheme;
# #
# #             # WebSocket 통신을 위한 설정
# #             proxy_http_version 1.1;
# #             proxy_set_header Upgrade $http_upgrade;
# #             proxy_set_header Connection $http_connection;
# #             proxy_pass_header X-XSRF-TOKEN;
# #
# #
# #             # Origin 헤더 추가 (WebSocket 크로스-오리진 문제 해결)
# #             proxy_set_header Origin "http://host.docker.internal:8080";
# #
# #             # 타임아웃 설정 (필요에 따라 조정)
# #             proxy_read_timeout 86400;
# #             proxy_send_timeout 86400;
# #
# #             # WebSocket의 압축 사용을 막기 위한 옵션 (필요시)
# #             proxy_set_header Sec-WebSocket-Extensions "";
# #         }
#     }
# }
http {
    # HTTP 요청을 HTTPS로 리다이렉트
    server {
        listen 80;
        server_name localhost;
        return 301 https://$host$request_uri;
    }

    # HTTPS 서버 설정
    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/localhost.crt;
        ssl_certificate_key /etc/nginx/localhost-key.pem;

        # Spring Boot API 리버스 프록시 설정
        location / {
            proxy_pass http://host.docker.internal:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket 설정을 위한 헤더
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_pass_header X-XSRF-TOKEN;

            # Origin 헤더를 클라이언트의 요청 그대로 전달
            proxy_set_header Origin $http_origin;

            # 타임아웃 설정 (WebSocket을 위한 설정)
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }
         # WebSocket 경로에 대한 리버스 프록시 설정
        location /ws {
            proxy_pass http://host.docker.internal:8080/ws;  # Spring Boot WebSocket 엔드포인트로 프록시
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket 통신을 위한 헤더 (업그레이드)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";  # 반드시 "upgrade"로 설정해야 합니다.
            proxy_pass_header X-XSRF-TOKEN;

            # WebSocket 타임아웃 설정
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
          }
    }
}
